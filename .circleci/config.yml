defaults:
  image_default: &image_default
    docker:
      - image: circleci/node:12.4.0
  image_browsers: &image_browsers
    docker:
      - image: circleci/node:12.4.0-browsers
  image_minimal: &image_minimal
    docker:
      - image: alpine
  install_image_minimal_dependencies: &install_image_minimal_dependencies
    name: Install Alpine dependencies
    command: apk add ca-certificates
  yarn_cache: &yarn_cache
    key: yarn_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
  build_final_cache_partial: &build_final_cache_partial
    key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-all-
  archive_build: &archive_build
    name: Archive build
    command: tar cvf ../build.tar packages/@groupby/*/dist packages/@groupby/*/esnext
  extract_build_archive: &extract_build_archive
    name: Extract archive
    command: |
      [ ! -r ../build.tar ] || tar xvf ../build.tar
      rm -f ../build.tar

  git_submodule_install: &git_submodule_install
    name: Install git submodules
    command: git submodule update --init
  yarn_install: &yarn_install
    name: Install
    command: yarn

  setup_git: &setup_git
    name: Setup Git user
    command: |
      git config --global user.email "ops@groupbyinc.com"
      git config --global user.name "GroupBy Ops"
      git config --global push.default simple
      cp .circleci/prepare-commit-msg .git/hooks/prepare-commit-msg
      chmod +x .git/hooks/prepare-commit-msg

  requires_build_core: &requires_build_core
    requires:
      - build_core
  requires_build_final: &requires_build_final
    requires:
      - build_final

version: 2.1

jobs:
  ## Initialization jobs

  ### generate_cache_key_file
  ### Stores the current build number in a file to use in unique cache keys and branch names for this workflow.
  ### The build number is guaranteed to be unique per build per project and is suitable for use as an identifier.
  generate_cache_key_file:
    <<: *image_minimal
    working_directory: ~/
    steps:
      - run: echo "$CIRCLE_BUILD_NUM" > workflow-start
      - run: *install_image_minimal_dependencies
      - persist_to_workspace:
          root: ~/
          paths:
            - workflow-start

  ## Build jobs

  ### build: build_{package}
  ### Builds {package} and stores them in a cache.
  build:
    <<: *image_default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-
      - run: *extract_build_archive
      - run:
          name: Dependencies
          command: sudo apt install -y rsync
      - run: *git_submodule_install
      - run: *yarn_install
      - save_cache:
          <<: *yarn_cache
          paths:
          - ~/.cache/yarn
      - run:
          name: Build
          command: |
            package="${CIRCLE_JOB#build_}"
            package="${package//_/-}"

            cd "packages/@groupby/elements-${package}"
            yarn build
      - run: *archive_build
      - save_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - ../build.tar

  ### Restores individual package builds and collects them into a single build archive.
  collect_builds:
    <<: *image_minimal
    working_directory: /home/circleci/project
    steps:
      - checkout
      - run: *install_image_minimal_dependencies
      - attach_workspace:
          at: /home/circleci
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_core-
      - run: *extract_build_archive
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_dom_events_plugin-
      - run: *extract_build_archive
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_sayt_plugin-
      - run: *extract_build_archive
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_search_plugin-
      - run: *extract_build_archive
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_cache-plugin-
      - run: *extract_build_archive
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_sayt_driver_plugin-
      - run: *extract_build_archive
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_search_driver_plugin-
      - run: *extract_build_archive
      - restore_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-build_cache_driver_plugin-
      - run: *extract_build_archive
      - run: *archive_build
      - save_cache:
          key: build_cache-v{{ .Environment.CI_CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}-{{ checksum "../workflow-start" }}-all-{{ epoch }}
          paths:
            - ../build.tar

  ## Unit test jobs

  ### unit_test: unit_test_{package}
  ### Runs the Node unit tests for {package}.
  unit_test:
    <<: *image_default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - restore_cache: *build_final_cache_partial
      - run: *extract_build_archive
      - run: *yarn_install
      - run:
          name: Test
          command: |
            package="${CIRCLE_JOB#unit_test_}"
            package="${package//_/-}"

            cd "packages/@groupby/elements-${package}"
            yarn test

  ### unit_test_browser: unit_test_browser_{package}
  ### Runs the Browser unit tests for {package}.
  unit_test_browser:
    <<: *image_browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - restore_cache: *build_final_cache_partial
      - run: *extract_build_archive
      - run: *yarn_install
      - run:
          name: Test
          command: |
            package="${CIRCLE_JOB#unit_test_browser_}"
            package="${package//_/-}"

            cd "packages/@groupby/elements-${package}"
            yarn test:browser

  ### unit_test_final
  ### No-op. This job exists to fan in all the unit test jobs.
  unit_test_final:
    <<: *image_minimal
    steps:
      - run: exit 0

  ## Linting jobs

  ### lint
  ### Runs the lint check across the entire project.
  lint:
    <<: *image_default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - restore_cache: *build_final_cache_partial
      - run: *extract_build_archive
      - run: *git_submodule_install
      - run: *yarn_install
      - run: yarn run lint:scripts:ci
      - run: yarn run lint:tests:ci

  ## Docs job

  ### docs
  ### Generates docs for all packages, then commits and pushes to the main release branch.
  docs:
    <<: *image_default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache: *yarn_cache
      - restore_cache: *build_final_cache_partial
      - run: *extract_build_archive
      - run: *yarn_install
      - run: *setup_git
      - run: *git_submodule_install
      - run:
          name: Docs
          command: |
            rm -rf docs
            yarn docs
      - run:
          name: Commit and push
          command: |
            git add docs
            # check that there is something to add so git commit will not fail
            if git status --porcelain | grep -e '^M' -e '^A'; then
              git commit -m "Generate docs"
              git push -u origin HEAD
            else
              echo "No changes to commit."
            fi

workflows:
  version: 2
  build_test:
    jobs:
      - generate_cache_key_file:
          filters:
            branches:
              ignore: /release\/.*/

      - build:
          name: build_core
          requires:
            - generate_cache_key_file
      - build:
          name: build_dom_events_plugin
          <<: *requires_build_core
      - build:
          name: build_sayt_plugin
          <<: *requires_build_core
      - build:
          name: build_search_plugin
          <<: *requires_build_core
      - build:
          name: build_cache_plugin
          <<: *requires_build_core
      - collect_builds:
          name: collect_independent_builds
          requires:
            - build_core
            - build_dom_events_plugin
            - build_sayt_plugin
            - build_search_plugin
            - build_cache_plugin

      - build:
          name: build_sayt_driver_plugin
          requires:
            - collect_independent_builds
      - build:
          name: build_search_driver_plugin
          requires:
            - collect_independent_builds
      - build:
          name: build_cache_driver_plugin
          requires:
            - collect_independent_builds
      - collect_builds:
          name: build_final
          requires:
            - build_sayt_driver_plugin
            - build_search_driver_plugin

      - unit_test:
          name: unit_test_core
          <<: *requires_build_final
      - unit_test:
          name: unit_test_dom_events_plugin
          <<: *requires_build_final
      - unit_test:
          name: unit_test_sayt_plugin
          <<: *requires_build_final
      - unit_test:
          name: unit_test_search_plugin
          <<: *requires_build_final
      - unit_test:
          name: unit_test_cache_plugin
          <<: *requires_build_final
      - unit_test:
          name: unit_test_sayt_driver_plugin
          <<: *requires_build_final
      - unit_test:
          name: unit_test_search_driver_plugin
          <<: *requires_build_final
      - unit_test:
          name: unit_test_cache_driver_plugin
          <<: *requires_build_final

      - unit_test_browser:
          name: unit_test_browser_core
          <<: *requires_build_final
      - unit_test_browser:
          name: unit_test_browser_dom_events_plugin
          <<: *requires_build_final
      - unit_test_browser:
          name: unit_test_browser_sayt_plugin
          <<: *requires_build_final
      - unit_test_browser:
          name: unit_test_browser_search_plugin
          <<: *requires_build_final
      - unit_test_browser:
          name: unit_test_browser_cache_plugin
          <<: *requires_build_final
      - unit_test_browser:
          name: unit_test_browser_sayt_driver_plugin
          <<: *requires_build_final
      - unit_test_browser:
          name: unit_test_browser_search_driver_plugin
          <<: *requires_build_final
      - unit_test_browser:
          name: unit_test_browser_cache_driver_plugin
          <<: *requires_build_final
      - unit_test_final:
          requires:
            - unit_test_core
            - unit_test_dom_events_plugin
            - unit_test_sayt_plugin
            - unit_test_search_plugin
            - unit_test_cache_plugin
            - unit_test_sayt_driver_plugin
            - unit_test_search_driver_plugin
            - unit_test_cache_driver_plugin
            - unit_test_browser_core
            - unit_test_browser_dom_events_plugin
            - unit_test_browser_sayt_plugin
            - unit_test_browser_search_plugin
            - unit_test_browser_cache_plugin
            - unit_test_browser_sayt_driver_plugin
            - unit_test_browser_search_driver_plugin
            - unit_test_browser_cache_driver_plugin

      - lint:
          requires:
            - build_final

      - docs:
          requires:
            - unit_test_final
          filters:
            branches:
              only:
                - master
